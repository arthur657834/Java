http://blog.163.com/bobile45@126/blog/static/9606199220139303343415/

定位最耗时的函数:
top 查看最耗cpu的进程java的pid
top -Hp pid  查看最耗cpu的java线程pid
把线程id转成16进制
printf "%x\n" java线程的pid
jstack java的pid > test.tmp
grep 16进制 test.tmp 可以看到函数名

jmap -permstat pid 如果运行在64位JVM上，可能需要指定-J-d64命令选项参数。
jmap -heap pid查看进程堆内存使用情况
jmap -histo[:live] pid查看堆内存中的对象数目、大小统计直方图,live则只统计活对象
	class name是对象类型，说明如下
	B  byte
	C  char
	D  double
	F  float
	I  int
	J  long
	Z  boolean
	[  数组，如[I表示int[]
	[L+类名 其他对象

jmap把进程内存使用情况dump到文件中，再用jhat分析查看
jmap -dump:format=b,file=dumpFileName pid
jhat -port 9998 /tmp/dump.dat
注意如果Dump文件太大，可能需要加上-J-Xmx512m这种参数指定最大堆内存，即jhat -J-Xmx512m -port 9998 /tmp/dump.dat。然后就可以在浏览器中输入主机地址:9998查看了
jstat -gc 21711 250 4 采样时间间隔为250ms，采样数为4：
	S0C、S1C、S0U、S1U：Survivor 0/1区容量（Capacity）和使用量（Used）
	EC、EU：Eden区容量和使用量
	OC、OU：年老代容量和使用量
	PC、PU：永久代容量和使用量
	YGC、YGT：年轻代GC次数和GC耗时
	FGC、FGCT：Full GC次数和Full GC耗时
	GCT：GC总耗时
	
jstat -class 25917 
显示加载class的数量，及所占空间等信息

jstat -compiler 25917
显示VM实时编译的数量等信息。

jstat -gccapacity 25917
可以显示，VM内存中三代（young,old,perm）对象的使用和占用大小，如：PGCMN显示的是最小perm的内存使用量，PGCMX显示的是perm的内存最大使用量，PGC是当前新生成的perm内存占用量，PC是但前perm内存占用量。其他的可以根据这个类推， OC是old内纯的占用量。

jstat -gcnew 25917
new对象的信息

jstat -gcnewcapacity 25917
new对象的信息及其占用量

jstat -gcold 25917
jstat -gcpermcapacity 25917
jstat -printcompilation -h3  25917 1000 5 -h3每三行显示一下标题。
 
java -agentlib:hprof=cpu=samples,interval=20,depth=3 Hello
javac -J-agentlib:hprof=cpu=times Hello.java
javac -J-agentlib:hprof=heap=sites Hello.java
javac -J-agentlib:hprof=heap=dump Hello.java


