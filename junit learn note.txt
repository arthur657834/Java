ex.
public void testAdd() {
    calculator.add(2);
    assertEquals(5, calculator.getResult());//第一个参数填写期待结果，第二个参数填写实际结果
}

@BeforeClass：针对所有测试，只执行一次，且必须为static void
@Before：初始化方法
@Test：测试方法，在这里可以测试期望异常和超时时间   
	@Test(timeout=1000) 设定执行时间，单位为毫秒 
	@Test(expected =ArithmeticException.class) 检测是否抛出异常
	
@After：释放资源
@AfterClass：针对所有测试，只执行一次，且必须为static void
@Ignore：忽略的测试方法

一个单元测试用例执行顺序为：
@BeforeClass –> @Before –> @Test –> @After –> @AfterClass

在JUnit中有很多个Runner，他们负责调用你的测试代码，每一个Runner都有各自的特殊功能，你要根据需要选择不同的Runner来运行你的测试代码
@RunWith(TestClassRunner.class)
@RunWith是用来修饰类的，而不是用来修饰函数的。只要对一个类指定了Runner，那么这个类中的所有函数都被这个Runner来调用

参数化测试
	ex:
		import static org.junit.Assert.*;
		import java.util.Collection;
		import java.util.Arrays;
		import org.junit.Test;
		import org.junit.runner.RunWith;
		import org.junit.runners.Parameterized;
		import org.junit.runners.Parameterized.Parameters;
		
		@RunWith(Parameterized.class)
		public class SquareTest {
			private static Calculator calculator = new Calculator();
		
			private int param;
			private int result;
			
			@Parameters //必须使用@Parameters标注进行修饰
			public static Collection data() {
				return Arrays.asList(new Object[][]{
						{2, 4},
						{0, 0},
						{-3, 9}
				});
			}
			
			//构造函数，对变量进行初始化
			public SquareTest(int param,int result)
			{
				this.param=param;
				this.result=result;
			}
			
			@Test
			public void square()
			{
				calculator.square(param);
				assertEquals(result,calculator.getResult());
				System.out.println("result="+result);
			}
		}

打包测试：
	ex.
		import org.junit.Assert.*;
		import org.junit.runner.RunWith;
		import org.junit.runners.Suite;
		
		@RunWith(Suite.class)
		@Suite.SuiteClasses({
				CalculatorTest.class,
				SquareTest.class })
		public class AllCalculatorTests {
		}

JUnit提供了一种批量运行测试类的方法，叫测试套件。

  测试套件的写法需要遵循以下原则：

  1. 创建一个空类作为测试套件的入口；

  2. 使用注解 org.junit.runner.RunWith 和 org.junit.runners.Suite.SuitClasses 修饰这个空类

  3. 将org.junit.runners.Suite作为参数传入给注解RunWith，以提示Junit为此类测试使用套件运行器执行。

  4. 将需要放入此测试套件的测试类组成数组作为注解SuiteClasses的参数

  5. 保证这个空类使用public修饰，而且存在公开的不带任何参数的构造函数.
 
GroboUtils:多线程Junit编写
	ex.
		import java.util.ArrayList;  
		import java.util.HashSet;  
		import java.util.Hashtable;  
		import java.util.List;  
		import java.util.Map;  
		import java.util.Set;  
		
		import net.sourceforge.groboutils.junit.v1.MultiThreadedTestRunner;  
		import net.sourceforge.groboutils.junit.v1.TestRunnable;  
		
		
		import org.junit.Test;  
		
		public class MutiThreadTest {  
		
			static String[] path = new String[] { "" };  
			static Map<String, String> countMap = new Hashtable<String, String>();  
			static Map<String, String> countMap2 = new Hashtable<String, String>();  
			static Set<String> countSet = new HashSet<String>();  
			static List<String> list = new ArrayList<String>();  
		
			@Test  
			public void testThreadJunit() throws Throwable {   
				//Runner数组，想当于并发多少个。 
				TestRunnable[] trs = new TestRunnable [10];  
				for(int i=0;i<10;i++){  
					trs[i]=new ThreadA();  
				}  
		
				// 用于执行多线程测试用例的Runner，将前面定义的单个Runner组成的数组传入 
				MultiThreadedTestRunner mttr = new MultiThreadedTestRunner(trs);  
				// 开发并发执行数组里定义的内容 
				mttr.runTestRunnables();  
			}  
		
			private class ThreadA extends TestRunnable {  
				@Override  
				public void runTest() throws Throwable {  
					// 测试内容
					myCommMethod2();  
				}  
			}  
		
			public void myCommMethod2() throws Exception {  
				System.out.println("===" + Thread.currentThread().getId() + "begin to execute myCommMethod2");  
				for (int i = 0; i <10; i++) {  
					int a  = i*5;  
					System.out.println(a);  
				}  
				System.out.println("===" + Thread.currentThread().getId() + "end to execute myCommMethod2");  
			}  
		}

	
